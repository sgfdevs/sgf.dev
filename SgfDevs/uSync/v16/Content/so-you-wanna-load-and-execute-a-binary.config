<?xml version="1.0" encoding="utf-8"?>
<Content Key="64dd62c7-d21e-4f8a-a60e-cc8e74b47b9d" Alias="So you wanna load and execute a binary?" Level="4">
  <Info>
    <Parent Key="ee24868e-5d98-4bc5-a6be-c0619c549e97">Dev Night - November 2025</Parent>
    <Path>/Home/Events/DevNightNovember2025/SoYouWannaLoadAndExecuteABinary</Path>
    <Trashed>false</Trashed>
    <ContentType>presentation</ContentType>
    <CreateDate>2025-10-12T03:20:07</CreateDate>
    <NodeName Default="So you wanna load and execute a binary?" />
    <SortOrder>0</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template />
  </Info>
  <Properties>
    <description>
      <Value><![CDATA[It's an absurd proposition. Programming languages have exhaustive implementations. Even more, libraries are in abundance. These days your operating system does a pretty good job at loading and executing binaries.

You are different. You have a need to execute code in a hostile environment. Perhaps you want to hack in your own code.

To do any of this, you need to understand the principles of binary formats and how they're executed. In this talk, you will learn the basics of binary formats, binary loading, relocation, and execution pitfalls. I'll also demo injecting and execute code into the Linux kernel and what you need to know about the ABI to successfully do so.]]></Value>
    </description>
    <group>
      <Value><![CDATA[umb://document/00a83654b95b429e9df844a2dca26d29]]></Value>
    </group>
    <image>
      <Value><![CDATA[]]></Value>
    </image>
    <meetupURL>
      <Value><![CDATA[https://www.meetup.com/sgfdevs/events/311498416/]]></Value>
    </meetupURL>
    <otherPresenters>
      <Value><![CDATA[]]></Value>
    </otherPresenters>
    <presenter>
      <Value><![CDATA[umb://member/cd539ece01cf41deb91eefe5e3b13814]]></Value>
    </presenter>
    <skillTags>
      <Value><![CDATA[]]></Value>
    </skillTags>
    <transcript>
      <Value><![CDATA[]]></Value>
    </transcript>
    <videoUrl>
      <Value><![CDATA[]]></Value>
    </videoUrl>
  </Properties>
</Content>